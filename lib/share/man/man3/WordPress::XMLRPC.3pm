.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "WordPress::XMLRPC 3"
.TH WordPress::XMLRPC 3 "2009-12-17" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
WordPress::XMLRPC \- api to wordpress xml rpc calls
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&   use WordPress::XMLRPC;
\&      
\&   my $o = WordPress:::XMLRPC\->new({
\&     username => \*(Aqauthor1\*(Aq,
\&     password => \*(Aqsuperpass\*(Aq,
\&     proxy => \*(Aqhttp://mysite.com/xmlrpc.php\*(Aq,
\&   });
\&   
\&   my $post = $o\->getPost(5); # id 5
\&   
\&   # let\*(Aqs change the title
\&   $post\->{title} = \*(AqI did not like the old title.\*(Aq;
\&   
\&   # let\*(Aqs save the changes back to the server..
\&   $o\->editPost(5, $post, 1); # 1 is publish
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
I wanted to interact via the command line to a wordpress blog's xmlrpc.php file.
Bascially this is interaction with xmlrpc.php as client.
This module is not meant for speed, it is meant for convenience.
.PP
This is really useful to automate new postings, uploading media, etc.
.Sh "WordPress version"
.IX Subsection "WordPress version"
This code was built against xmlrpc.php included in WordPress 2.8.4.
As new calls are included in xmlrpc.php, this module is be updated.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Sh "\fInew()\fP"
.IX Subsection "new()"
Optional arg is hash ref.
.PP
Before we open a connection with xmlrpc, we need to have 
username, password, and proxy in the object's data.
You can provide this in the following ways..
.PP
.Vb 5
\&   my $o = WordPress:::XMLRPC\->new({
\&     username => \*(Aqauthor1\*(Aq,
\&     password => \*(Aqsuperpass\*(Aq,
\&     proxy => \*(Aqhttp://mysite.com/xmlrpc.php\*(Aq,
\&   });
.Ve
.PP
Or..
.PP
.Vb 1
\&   my $o = WordPress:::XMLRPC\->new;  
\&   
\&   $o\->username(\*(Aqauthor1\*(Aq);
\&   $o\->password(\*(Aqsuperpass\*(Aq);
\&   $o\->proxy(\*(Aqhttp://mysite.com/xmlrpc.php\*(Aq);
\&   
\&   $o\->server 
\&      or die( 
\&         sprintf \*(Aqcould not connect with %s:%s to %s\*(Aq,
\&            $self\->username,
\&            $self\->password,
\&            $self\->proxy,
\&         );
.Ve
.PP
Uploading a file..
.PP
.Vb 3
\&   my $data = WordPress:::XMLRPC::abs_path_to_media_object_data(\*(Aq./file.jpg\*(Aq);
\&   my $r = $o\->newMediaObject($data);
\&   print $r\->{url};
.Ve
.SH "METHODS"
.IX Header "METHODS"
.Sh "\fIxmlrpc_methods()\fP"
.IX Subsection "xmlrpc_methods()"
Returns array of methods in this package that make calls via xmlrpc.
.Sh "\fIserver_methods()\fP"
.IX Subsection "server_methods()"
Returns array of server methods accessible via xmlrpc.
.Sh "\fIusername()\fP"
.IX Subsection "username()"
Perl set/get method. Argument is string.
If you pass 'username' to constructor, it is prepopulated.
.PP
.Vb 2
\&   my $username = $o\->username;
\&   $o\->username(\*(Aqbill\*(Aq);
.Ve
.Sh "\fIpassword()\fP"
.IX Subsection "password()"
Perl set/get method. Argument is string.
If you pass 'password' to constructor, it is prepopulated.
.PP
.Vb 2
\&   my $pw = $o\->password;
\&   $o\->password(\*(Aqjim\*(Aq);
.Ve
.Sh "\fIproxy()\fP"
.IX Subsection "proxy()"
Perl set/get method. Argument is string.
If you pass 'proxy' to constructor, it is prepopulated.
.Sh "\fIserver()\fP"
.IX Subsection "server()"
Returns XMLRPC::Lite object.
\&\fIproxy()\fR must be set.
.Sh "\fIblog_id()\fP"
.IX Subsection "blog_id()"
Setget method, set to '1' by default.
This seems unused by wordpress. They have some documentation on this.
.Sh "\fIpublish()\fP"
.IX Subsection "publish()"
Many methods use 'publish' boolean value, by default we set to 1.
You can still pass a value for publish such as;
.PP
.Vb 1
\&   $o\->newPost( $content_hashref, 1 );
.Ve
.PP
But you can also call;
.PP
.Vb 1
\&   $o\->newPost( $content_hashref );
.Ve
.PP
As we said, by default it is set to 1, if you want to set the default to 0,
.PP
.Vb 1
\&   $o\->publish(0);
.Ve
.Sh "\fIerrstr()\fP"
.IX Subsection "errstr()"
Returns error string if a call fails.
.PP
.Vb 1
\&   $o\->newPost(@args) or die($o\->errstr);
.Ve
.PP
If the \s-1DEBUG\s0 flag is on, this warns to \s-1STDERR\s0 automatically as well.
.Sh "\s-1XML\s0 \s-1RPC\s0 \s-1METHODS\s0"
.IX Subsection "XML RPC METHODS"
These methods specifically mirror the xmlrpc.php file provided by WordPress installations.
This file sits on your website.
.PP
\fI\fIgetPage()\fI\fR
.IX Subsection "getPage()"
.PP
Takes 1 args: page_id (number).
Returns page hashref struct(ure).
.PP
Example return:
.PP
.Vb 10
\&         $val: {
\&                 categories => [
\&                                 \*(AqUncategorized\*(Aq
\&                               ],
\&                 dateCreated => \*(Aq20080121T12:38:30\*(Aq,
\&                 date_created_gmt => \*(Aq20080121T20:38:30\*(Aq,
\&                 description => \*(AqThese are some interesting resources online.\*(Aq,
\&                 excerpt => \*(Aq\*(Aq,
\&                 link => \*(Aqhttp://leocharre.com/perl\-resources/\*(Aq,
\&                 mt_allow_comments => \*(Aq0\*(Aq,
\&                 mt_allow_pings => \*(Aq0\*(Aq,
\&                 page_id => \*(Aq87\*(Aq,
\&                 page_status => \*(Aqpublish\*(Aq,
\&                 permaLink => \*(Aqhttp://leocharre.com/perl\-resources/\*(Aq,
\&                 text_more => \*(Aq\*(Aq,
\&                 title => \*(AqResources\*(Aq,
\&                 userid => \*(Aq2\*(Aq,
\&                 wp_author => \*(Aqleocharre\*(Aq,
\&                 wp_author_display_name => \*(Aqleocharre\*(Aq,
\&                 wp_author_id => \*(Aq2\*(Aq,
\&                 wp_page_order => \*(Aq0\*(Aq,
\&                 wp_page_parent_id => \*(Aq0\*(Aq,
\&                 wp_page_parent_title => \*(Aq\*(Aq,
\&                 wp_password => \*(Aq\*(Aq,
\&                 wp_slug => \*(Aqperl\-resources\*(Aq
\&               }
.Ve
.PP
This is the same struct hashref you would send to \fInewPage()\fR.
.PP
\fI\fIgetPages()\fI\fR
.IX Subsection "getPages()"
.PP
Returns array ref.
Each element is a hash ref same as \fIgetPage()\fR returns.
If you want less info, just basic info on each page, use \fIgetPageList()\fR.
.PP
\fI\fInewPage()\fI\fR
.IX Subsection "newPage()"
.PP
Takes 2 args: page (hashref), publish (boolean).
You can leave out publish, as discussed further in this documentation.
The hashref must have at least a title and description.
Returns page id (number, assigned by server).
.PP
\fI\fIdeletePage()\fI\fR
.IX Subsection "deletePage()"
.PP
Takes 1 args: page_id (number).
Returns boolean (true or false).
.PP
\fI\fIeditPage()\fI\fR
.IX Subsection "editPage()"
.PP
First, required argument\- is content struct page hashref.
Second, optional argument\- is publish boolean.
(The page hashref is just as discussed in \fIgetPage()\fR.)
.PP
You could use \fIgetPage()\fR, edit the returned hashref, and resubmit with \fIeditPage()\fR.
.PP
.Vb 1
\&   my $page_hashref = $o\->getPage(5);
\&   
\&   $page_hashref\->{title} = \*(AqThis is the New Title\*(Aq;
\&   
\&   $o\->editPage( $page_hashref ) 
\&      or die( $o\->errstr );
.Ve
.PP
Obviously the page id is in the page data (hashref), this is there inherently when you
call \fIgetPage()\fR.
.PP
The same would be done with the posts.
.PP
Deprecating usage of:
.IX Subsection "Deprecating usage of:"
.PP
Optional first argument is page id number.
Optional usage for same example above:
.PP
.Vb 2
\&   $o\->editPage( 5, { title => \*(Aqnew title\*(Aq } ) 
\&      or die( $o\->errstr );
.Ve
.PP
Page id must be present as first argument, or as key/value pair in content hashref.
If the content hashref is what you got with \fIgetPage()\fR for example, the page id is already present.
.PP
\fI\fIgetPageList()\fI\fR
.IX Subsection "getPageList()"
.PP
Returns arrayref.
Each element is a hashref.
This is sort of a short version of \fIgetPages()\fR, which returns all info for each.
.PP
Example return:
.PP
.Vb 10
\&         $return_value: [
\&                          {
\&                            dateCreated => \*(Aq20061113T11:08:22\*(Aq,
\&                            date_created_gmt => \*(Aq20061113T19:08:22\*(Aq,
\&                            page_id => \*(Aq2\*(Aq,
\&                            page_parent_id => \*(Aq0\*(Aq,
\&                            page_title => \*(AqAbout Moi\*(Aq
\&                          },
\&                          {
\&                            dateCreated => \*(Aq20080105T18:57:24\*(Aq,
\&                            date_created_gmt => \*(Aq20080106T02:57:24\*(Aq,
\&                            page_id => \*(Aq43\*(Aq,
\&                            page_parent_id => \*(Aq74\*(Aq,
\&                            page_title => \*(Aqtree\*(Aq
\&                          },
\&                        ]
.Ve
.PP
\fI\fIgetAuthors()\fI\fR
.IX Subsection "getAuthors()"
.PP
Takes no argument.
Returns array ref, each element is a hashref.
.PP
.Vb 12
\&         $return_value: [
\&                          {
\&                            display_name => \*(Aqleo\*(Aq,
\&                            user_id => \*(Aq2\*(Aq,
\&                            user_login => \*(Aqleo\*(Aq
\&                          },
\&                          {
\&                            display_name => \*(Aqchamon\*(Aq,
\&                            user_id => \*(Aq3\*(Aq,
\&                            user_login => \*(Aqchamon\*(Aq
\&                          }
\&                        ]
.Ve
.PP
\fI\fIgetCategories()\fI\fR
.IX Subsection "getCategories()"
.PP
Takes no argument.
Example return value:
.PP
.Vb 10
\&         $return_value: [
\&                          {
\&                            categoryId => \*(Aq4\*(Aq,
\&                            categoryName => \*(Aqart\*(Aq,
\&                            description => \*(Aqart\*(Aq,
\&                            htmlUrl => \*(Aqhttp://leocharre.com/articles/category/art/\*(Aq,
\&                            parentId => \*(Aq0\*(Aq,
\&                            rssUrl => \*(Aqhttp://leocharre.com/articles/category/art/feed/\*(Aq
\&                          },
\&                          {
\&                            categoryId => \*(Aq1\*(Aq,
\&                            categoryName => \*(AqUncategorized\*(Aq,
\&                            description => \*(AqUncategorized\*(Aq,
\&                            htmlUrl => \*(Aqhttp://leocharre.com/articles/category/uncategorized/\*(Aq,
\&                            parentId => \*(Aq0\*(Aq,
\&                            rssUrl => \*(Aqhttp://leocharre.com/articles/category/uncategorized/feed/\*(Aq
\&                          }
\&                        ]
.Ve
.PP
\fI\fInewCategory()\fI\fR
.IX Subsection "newCategory()"
.PP
Takes 1 args: category struct.
Returns category id (number).
.PP
The category struct is a hash ref alike..
.PP
.Vb 5
\&   {
\&      name => \*(AqUgly houses\*(Aq,
\&      parent_id => 34, # (if this is a sub category )
\&      description => \*(Aqthis is a great category\*(Aq,
\&   }
.Ve
.PP
The key 'name' must be present or croaks.
.PP
\fI\fIgetCategory()\fI\fR
.IX Subsection "getCategory()"
.PP
Argument is category id, will return struct (hash ref).
.PP
.Vb 8
\&   $got: {
\&           categoryId => 99,
\&           categoryName => \*(Aqcategory772\*(Aq,
\&           description => \*(Aqcategory772\*(Aq,
\&           htmlUrl => \*(Aqhttp://leocharre.com/articles/category/category772/\*(Aq,
\&           parentId => \*(Aq0\*(Aq,
\&           rssUrl => \*(Aqhttp://leocharre.com/articles/category/category772/feed/\*(Aq
\&         }
.Ve
.IP "\s-1CAVEAT\s0" 4
.IX Item "CAVEAT"
There seems to be a bug in xmlrpc.php (wordpress v 2.3.2) , that does not fill out 
the categories properly. You can use  \fInewCategory()\fR to insert a description, bu
upon \fIgetCategory()\fR, the struct description is replaced by the categoryName field.
.PP
\fI\fIsuggestCategories()\fI\fR
.IX Subsection "suggestCategories()"
.PP
Takes 2 optional args: category, max_results.
.PP
Returns array ref, each element is a hashref.
.PP
Apparently it does a word match on the existing categories, if you provide 
a category string argument.
.PP
If you call it as the following..
.PP
.Vb 1
\&   $o\->suggestCategories(\*(Aqdraw\*(Aq);
.Ve
.PP
And you have a 'drawing' category, it returns:
.PP
.Vb 6
\&   $r: [
\&         {
\&           category_id => \*(Aq187\*(Aq,
\&           category_name => \*(Aqdrawing\*(Aq
\&         }
\&       ]
.Ve
.PP
With no arguments, example return:
.PP
.Vb 10
\&   $r: [
\&         {
\&           category_id => \*(Aq4\*(Aq,
\&           category_name => \*(Aqart\*(Aq
\&         },
\&         {
\&           category_id => \*(Aq196\*(Aq,
\&           category_name => \*(Aqcategory528\*(Aq
\&         },
\&         {
\&           category_id => \*(Aq197\*(Aq,
\&           category_name => \*(Aqcategory528 appended\*(Aq
\&         },
\&         {
\&           category_id => \*(Aq203\*(Aq,
\&           category_name => \*(Aqcategory919 appended\*(Aq
\&         },
\&         {
\&           category_id => \*(Aq184\*(Aq,
\&           category_name => \*(Aqdesign\*(Aq
\&         },
\&         {
\&           category_id => \*(Aq183\*(Aq,
\&           category_name => \*(Aqdev\*(Aq
\&         },
\&         {
\&           category_id => \*(Aq187\*(Aq,
\&           category_name => \*(Aqdrawing\*(Aq
\&         },
\&         {
\&           category_id => \*(Aq190\*(Aq,
\&           category_name => \*(Aqgraphic\*(Aq
\&         },
\&         {
\&           category_id => \*(Aq5\*(Aq,
\&           category_name => \*(Aqnear life experience\*(Aq
\&         },
\&         {
\&           category_id => \*(Aq188\*(Aq,
\&           category_name => \*(Aqpainting\*(Aq
\&         },
\&         {
\&           category_id => \*(Aq189\*(Aq,
\&           category_name => \*(Aqpinup\*(Aq
\&         },
\&         {
\&           category_id => \*(Aq186\*(Aq,
\&           category_name => \*(Aqweb\*(Aq
\&         }
\&       ]
.Ve
.PP
\fI\fIdeleteCategory()\fI\fR
.IX Subsection "deleteCategory()"
.PP
Takes 1 args: category_id (number).
Returns boolean.
.PP
I suppose you could search for categories with the name 'bad' and delete them as..
.PP
.Vb 4
\&   for my $category_href ( @{ $o\->suggestCategories(\*(Aqbad\*(Aq) } ){
\&      $o\->deleteCategory($category_href\->{category_id})
\&         or warn("Could not delete $category\->{category_name});
\&   }
.Ve
.PP
\fI\fIgetComment()\fI\fR
.IX Subsection "getComment()"
.PP
Takes 1 args: comment_id (number).
Returns struct (hashref).
.PP
.Vb 1
\&   $o\->getComment(2603);
.Ve
.PP
Example return value:
   \f(CW$r:\fR {
         author => 'santrex sucks',
         author_email => 'webmaster@santrexsucks.com',
         author_ip => '66.165.246.149',
         author_url => 'http://santrexsucks.com',
         comment_id => '2603',
         content => 'santrex is the worst hosting company ive ever used. santrex should be avoided at all costs!',
         date_created_gmt => '20090617T00:17:54',
         link => 'http://leocharre.com/articles/its\-on\-bitch/comment\-page\-1/#comment\-2603',
         parent => '0',
         post_id => '372',
         post_title => 'IT&#8217;S \s-1ON\s0 \s-1BITCH\s0',
         status => 'approve',
         type => '',
         user_id => '0'
       }
.PP
\fI\fIgetComments()\fI\fR
.IX Subsection "getComments()"
.PP
Takes 1 args: struct (hashref).
\&\s-1NOTE:\s0 Untested. If you have info on this, send it in.
.PP
\fI\fIdeleteComment()\fI\fR
.IX Subsection "deleteComment()"
.PP
Takes 1 args: comment_id (number).
Returns bool true or false.
.PP
.Vb 1
\&   $o\->deleteComment(2603);
.Ve
.PP
\fI\fIeditComment()\fI\fR
.IX Subsection "editComment()"
.PP
Takes 2 args: comment_id (number), content_struct (hashref).
.PP
\fI\fInewComment()\fI\fR
.IX Subsection "newComment()"
.PP
Takes 2 args: post id, content_struct (hashref).
Returns new comment id (number).
.PP
This will be posted under your login name. The post id is the post the comment is in regards to.
.PP
.Vb 1
\&   $o\->newComment( 15, { status => \*(Aqapprove\*(Aq, content => "Hi there, this is a note." } );
.Ve
.PP
\fI\fIgetCommentStatusList()\fI\fR
.IX Subsection "getCommentStatusList()"
.PP
Takes no argument.
Returns hashref.
.PP
Example return value:
   \f(CW$r:\fR {
         approve => 'Approved',
         hold => 'Unapproved',
         spam => 'Spam'
       }
.PP
\fI\fIgetOptions()\fI\fR
.IX Subsection "getOptions()"
.PP
Optional arguments are, a list of option names.
If you do not pass a list of options assumes all are chosen.
Returns hash ref. Of which each key is the option name. Each value is a hashref itself.
.PP
Return hashref format:
.PP
.Vb 1
\&   $options => {
\&
\&      $option_name => {
\&         desc        => $string,
\&         readonly    => $boolean,
\&         value       => $string
\&      },
\&   };
.Ve
.PP
Possible option names (as of wordpress 2.8.4):
   blog_tagline, blog_title, blog_url, date_format, software_name, 
   software_version, time_format, time_zone
.PP
Example return value (with no arguments):
.PP
.Vb 10
\&   $options: {
\&               blog_tagline => {
\&                                 desc => \*(AqBlog Tagline\*(Aq,
\&                                 readonly => \*(Aq0\*(Aq,
\&                                 value => \*(Aqpinup art, perl, unix, developer smorgasbord\*(Aq
\&                               },
\&               blog_title => {
\&                               desc => \*(AqBlog Title\*(Aq,
\&                               readonly => \*(Aq0\*(Aq,
\&                               value => \*(Aqleo charre\*(Aq
\&                             },
\&               blog_url => {
\&                             desc => \*(AqBlog URL\*(Aq,
\&                             readonly => \*(Aq1\*(Aq,
\&                             value => \*(Aqhttp://leocharre.com\*(Aq
\&                           },
\&               date_format => {
\&                                desc => \*(AqDate Format\*(Aq,
\&                                readonly => \*(Aq0\*(Aq,
\&                                value => \*(AqF j, Y\*(Aq
\&                              },
\&               software_name => {
\&                                  desc => \*(AqSoftware Name\*(Aq,
\&                                  readonly => \*(Aq1\*(Aq,
\&                                  value => \*(AqWordPress\*(Aq
\&                                },
\&               software_version => {
\&                                     desc => \*(AqSoftware Version\*(Aq,
\&                                     readonly => \*(Aq1\*(Aq,
\&                                     value => \*(Aq2.8.4\*(Aq
\&                                   },
\&               time_format => {
\&                                desc => \*(AqTime Format\*(Aq,
\&                                readonly => \*(Aq0\*(Aq,
\&                                value => \*(Aqg:i a\*(Aq
\&                              },
\&               time_zone => {
\&                              desc => \*(AqTime Zone\*(Aq,
\&                              readonly => \*(Aq0\*(Aq,
\&                              value => \*(Aq\-8\*(Aq
\&                            }
\&             }
.Ve
.PP
Example usage:
.PP
.Vb 2
\&   my $options = $o\->getOptions(\*(Aqsoftware_name\*(Aq, \*(Aqtime_zone\*(Aq,);
\&   my $options = $o\->getOptions;
.Ve
.PP
\fI\fIsetOptions()\fI\fR
.IX Subsection "setOptions()"
.PP
Takes 1 args: options hash ref.
Returns same as \fIgetOptions()\fR.
.PP
Argument is hashref with keys the name of the option, and values the new values.
.PP
\&\s-1NOTE:\s0 The structure of the hashref to \fIsetOptions()\fR is *not* the same as the structure that \fIgetOptions()\fR
returns.
.PP
\&\s-1NOTE:\s0 Also note, some options are set read only, that means they cannot be changed via this method.
.PP
Example usage:
.PP
.Vb 1
\&   $o\->setOptions({ blog_tagline => \*(AqNew tagline for this blog, this is the best blog ever\*(Aq });
.Ve
.PP
This would return:
.PP
.Vb 7
\&   $out: {
\&           blog_tagline => {
\&                             desc => \*(AqBlog Tagline\*(Aq,
\&                             readonly => \*(Aq0\*(Aq,
\&                             value => \*(AqNew tagline for this blog, this is the best blog ever\*(Aq, 
\&                           }
\&         }
.Ve
.PP
The value taken by \fIsetOptions()\fR should be the same as returned by \fIgetOptions()\fR. This is more proof
that php \*(L"coders\*(R" have no discipline. As if proof were needed. Ok, maybe that's too harsh.
.PP
\fI\fInewPost()\fI\fR
.IX Subsection "newPost()"
.PP
Takes 2 args: content_struct, publish.
Returns id number of new post.
.PP
\fI\fIeditPost()\fI\fR
.IX Subsection "editPost()"
.PP
Takes 3 args: post_ID, content_struct, publish.
Returns boolean, true or false.
.PP
\fI\fIdeletePost()\fI\fR
.IX Subsection "deletePost()"
.PP
Argument is post id(number).
Returns boolean.
.PP
\fI\fIgetPost()\fI\fR
.IX Subsection "getPost()"
.PP
Takes 1 args: post_ID
Returns post struct, hashref.
.PP
.Vb 10
\&         $example_return_value: {
\&                                  categories => [
\&                                                  \*(AqUncategorized\*(Aq
\&                                                ],
\&                                  dateCreated => \*(Aq20080130T14:19:05\*(Aq,
\&                                  date_created_gmt => \*(Aq20080130T22:19:05\*(Aq,
\&                                  description => \*(Aqtest description here\*(Aq,
\&                                  link => \*(Aqhttp://leocharre.com/articles/test_1201731544/\*(Aq,
\&                                  mt_allow_comments => \*(Aq1\*(Aq,
\&                                  mt_allow_pings => \*(Aq1\*(Aq,
\&                                  mt_excerpt => \*(Aq\*(Aq,
\&                                  mt_keywords => \*(Aq\*(Aq,
\&                                  mt_text_more => \*(Aq\*(Aq,
\&                                  permaLink => \*(Aqhttp://leocharre.com/articles/test_1201731544/\*(Aq,
\&                                  postid => \*(Aq119\*(Aq,
\&                                  title => \*(Aqtest_1201731544\*(Aq,
\&                                  userid => \*(Aq2\*(Aq,
\&                                  wp_author_display_name => \*(Aqleocharre\*(Aq,
\&                                  wp_author_id => \*(Aq2\*(Aq,
\&                                  wp_password => \*(Aq\*(Aq,
\&                                  wp_slug => \*(Aqtest_1201731544\*(Aq
\&                                }
.Ve
.PP
\fI\fIgetRecentPosts()\fI\fR
.IX Subsection "getRecentPosts()"
.PP
Takes 1 args: num_posts (number, optional).
Returns arrayref.
.PP
Each element is hash ref same as \fIgetPost()\fR would return.
.PP
\fI\fInewMediaObject()\fI \fIuploadFile()\fI\fR
.IX Subsection "newMediaObject() uploadFile()"
.PP
Takes 1 args: data (hashref).
The hashref keys and values are bits (Mime::Base64), type (mime type), and name (filename).
See \fIabs_path_to_media_object_data()\fR.
Returns result:
.PP
.Vb 5
\&   ### $r: {
\&   ###       file => \*(Aqmedia.jpg\*(Aq,
\&   ###       type => \*(Aqimage/jpeg\*(Aq,
\&   ###       url => \*(Aqhttp://leocharre.com/wp\-content/uploads/media3.jpg\*(Aq
\&   ###     }
.Ve
.PP
Would be truly useful if it returned id!
.PP
\fI\fIgetTemplate()\fI\fR
.IX Subsection "getTemplate()"
.PP
Takes 1 args: template name (string).
\&\s-1NOTE:\s0 This fails. Don't know why. If you have any idea, contact \s-1AUTHOR\s0.
.PP
\fI\fIsetTemplate()\fI\fR
.IX Subsection "setTemplate()"
.PP
Takes 2 args: content, template.
\&\s-1NOTE:\s0 Untested.
.PP
\fI\fIgetPageTemplates()\fI\fR
.IX Subsection "getPageTemplates()"
.PP
Takes no args.
Returns hashref.
.PP
Example return:
.PP
.Vb 5
\&   return: {
\&             Default => \*(Aqdefault\*(Aq,
\&             \*(AqLink Categories\*(Aq => \*(Aqlink_categories.php\*(Aq,
\&             Links => \*(Aqlinks.php\*(Aq
\&           }
.Ve
.PP
\fI\fIgetTags()\fI\fR
.IX Subsection "getTags()"
.PP
Takes no argument.
Returns array ref. Each element is a hashref.
.PP
Example return:
.PP
.Vb 10
\&   return: [
\&             {
\&               count => \*(Aq1\*(Aq,
\&               html_url => \*(Aqhttp://leocharre.com/articles/tag/avi/\*(Aq,
\&               name => \*(Aqavi\*(Aq,
\&               rss_url => \*(Aqhttp://leocharre.com/articles/tag/avi/feed/\*(Aq,
\&               slug => \*(Aqavi\*(Aq,
\&               tag_id => \*(Aq158\*(Aq
\&             },
\&             {
\&               count => \*(Aq1\*(Aq,
\&               html_url => \*(Aqhttp://leocharre.com/articles/tag/bugzilla/\*(Aq,
\&               name => \*(Aqbugzilla\*(Aq,
\&               rss_url => \*(Aqhttp://leocharre.com/articles/tag/bugzilla/feed/\*(Aq,
\&               slug => \*(Aqbugzilla\*(Aq,
\&               tag_id => \*(Aq195\*(Aq
\&             },
\&             {
\&               count => \*(Aq1\*(Aq,
\&               html_url => \*(Aqhttp://leocharre.com/articles/tag/callback/\*(Aq,
\&               name => \*(Aqcallback\*(Aq,
\&               rss_url => \*(Aqhttp://leocharre.com/articles/tag/callback/feed/\*(Aq,
\&               slug => \*(Aqcallback\*(Aq,
\&               tag_id => \*(Aq30\*(Aq
\&             },
\&           ]
\&        ... .etc.....
.Ve
.PP
\fI\fIgetUsersBlogs()\fI\fR
.IX Subsection "getUsersBlogs()"
.PP
No argument, returns users blogs.
Example return :
.PP
.Vb 8
\&         $r: [
\&               {
\&                 blogName => \*(Aqleo charre\*(Aq,
\&                 blogid => \*(Aq1\*(Aq,
\&                 isAdmin => \*(Aq1\*(Aq,
\&                 url => \*(Aqhttp://leocharre.com/\*(Aq
\&               }
\&             ]
.Ve
.SH "DEBUG"
.IX Header "DEBUG"
This is useful if you get errors..
.PP
.Vb 1
\&   $WordPress::XMLRPC::DEBUG = 1;
.Ve
.SH "WISHLIST"
.IX Header "WISHLIST"
It'd be nice to manage links via xmlrpc.php, but this is up to wordpress devs.
.SH "BUGS"
.IX Header "BUGS"
Please submit to \s-1AUTHOR\s0
.SH "CAVEATS"
.IX Header "CAVEATS"
This distro is alpha.
Included are the metaWeblog and wp method calls.
.SH "REQUIREMENTS"
.IX Header "REQUIREMENTS"
XMLRPC::Lite
.SH "SEE ALSO"
.IX Header "SEE ALSO"
XMLRPC::Lite
SOAP::Lite
WordPress <http://wordpress.org>
.SH "AUTHOR"
.IX Header "AUTHOR"
Leo Charre leocharre at cpan dot org
.Sh "\s-1THANKS\s0"
.IX Subsection "THANKS"
People who contributed code, criticism, patches, suggestions;
.PP
Alan Haggai Alavi
.SH "LICENSE"
.IX Header "LICENSE"
This package is free software; you can redistribute it and/or modify it under the same terms as Perl itself, i.e., under the terms of the \*(L"Artistic License\*(R" or the \*(L"\s-1GNU\s0 General Public License\*(R".
.SH "DISCLAIMER"
.IX Header "DISCLAIMER"
This package is distributed in the hope that it will be useful, but \s-1WITHOUT\s0 \s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of \s-1MERCHANTABILITY\s0 or \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.
.PP
See the \*(L"\s-1GNU\s0 General Public License\*(R" for more details.
