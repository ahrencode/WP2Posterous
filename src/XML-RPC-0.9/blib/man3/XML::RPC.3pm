.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "XML::RPC 3"
.TH XML::RPC 3 "2009-01-01" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
XML::RPC \-\- Pure Perl implementation for an XML\-RPC client and server.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
make a call to an XML-RPC server:
.PP
.Vb 1
\&    use XML::RPC;
\&
\&    my $xmlrpc = XML::RPC\->new(\*(Aqhttp://betty.userland.com/RPC2\*(Aq);
\&    my $result = $xmlrpc\->call( \*(Aqexamples.getStateStruct\*(Aq, { state1 => 12, state2 => 28 } );
.Ve
.PP
create an XML-RPC service:
.PP
.Vb 2
\&    use XML::RPC;
\&    use CGI;
\&
\&    my $q      = new CGI;
\&    my $xmlrpc = XML::RPC\->new();
\&    my $xml    = $q\->param(\*(AqPOSTDATA\*(Aq);
\&
\&    print $q\->header( \-type => \*(Aqtext/xml\*(Aq, \-charset => \*(AqUTF\-8\*(Aq );
\&    print $xmlrpc\->receive( $xml, \e&handler );
\&
\&    sub handler {
\&        my ( $methodname, @params ) = @_;
\&        return { you_called => $methodname, with_params => \e@params };
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1XML::RPC\s0 module provides simple Pure Perl methods for XML-RPC communication.
It's goals are simplicity and flexibility. \s-1XML::RPC\s0 uses XML::TreePP
for parsing.
.SH "CONSTRUCTOR AND OPTIONS"
.IX Header "CONSTRUCTOR AND OPTIONS"
.ie n .Sh "$xmlrpc\fP = \s-1XML::RPC\-\s0>\fInew();"
.el .Sh "\f(CW$xmlrpc\fP = \s-1XML::RPC\-\s0>\fInew()\fP;"
.IX Subsection "$xmlrpc = XML::RPC->new();"
This constructor method returns a new \s-1XML::RPC\s0 object. Usable for XML-RPC servers.
.ie n .Sh "$xmlrpc\fP = \s-1XML::RPC\-\s0>new( 'http://betty.userland.com/RPC2', \f(CW%options );"
.el .Sh "\f(CW$xmlrpc\fP = \s-1XML::RPC\-\s0>new( 'http://betty.userland.com/RPC2', \f(CW%options\fP );"
.IX Subsection "$xmlrpc = XML::RPC->new( 'http://betty.userland.com/RPC2', %options );"
Its first argument is the full \s-1URL\s0 for your server. The second argument
is for options passing to XML::TreePP, for example: output_encoding => '\s-1ISO\-8859\-1\s0'
(default is \s-1UTF\-8\s0).
.SH "METHODS"
.IX Header "METHODS"
.ie n .Sh "$xmlrpc\fP\->call( 'method_name', \f(CW@arguments );"
.el .Sh "\f(CW$xmlrpc\fP\->call( 'method_name', \f(CW@arguments\fP );"
.IX Subsection "$xmlrpc->call( 'method_name', @arguments );"
This method calls the provides XML-RPC server's method_name with
\&\f(CW@arguments\fR. It will return the server method's response.
.ie n .Sh "$xmlrpc\fP\->receive( \f(CW$xml, \e&handler );"
.el .Sh "\f(CW$xmlrpc\fP\->receive( \f(CW$xml\fP, \e&handler );"
.IX Subsection "$xmlrpc->receive( $xml, &handler );"
This parses an incoming XML-RPC methodCall and call the \e&handler subref
with parameters: \f(CW$methodName\fR and \f(CW@parameters\fR.
.ie n .Sh "$xmlrpc\fP\->\fIxml_in();"
.el .Sh "\f(CW$xmlrpc\fP\->\fIxml_in()\fP;"
.IX Subsection "$xmlrpc->xml_in();"
Returns the last \s-1XML\s0 that went in the client.
.ie n .Sh "$xmlrpc\fP\->\fIxml_out();"
.el .Sh "\f(CW$xmlrpc\fP\->\fIxml_out()\fP;"
.IX Subsection "$xmlrpc->xml_out();"
Returns the last \s-1XML\s0 that went out the client.
.SH "CUSTOM TYPES"
.IX Header "CUSTOM TYPES"
.ie n .Sh "$xmlrpc\->call( 'method_name', { data => sub { { 'base64' => encode_base64($data) } } } );"
.el .Sh "\f(CW$xmlrpc\fP\->call( 'method_name', { data => sub { { 'base64' => encode_base64($data) } } } );"
.IX Subsection "$xmlrpc->call( 'method_name', { data => sub { { 'base64' => encode_base64($data) } } } );"
When passing a \s-1CODEREF\s0 to a value \s-1XML::RPC\s0 will simply use the returned hashref as a type => value pair.
.SH "ERROR HANDLING"
.IX Header "ERROR HANDLING"
To provide an error response you can simply \fIdie()\fR in the \e&handler
function. Also you can set the \f(CW$XML::RPC::faultCode\fR variable to a (int) value
just before dieing.
.SH "PROXY SUPPORT"
.IX Header "PROXY SUPPORT"
Default \s-1XML::RPC\s0 will try to use LWP::Useragent for requests,
you can set the environment variable: \s-1CGI_HTTP_PROXY\s0 to
set a proxy.
.SH "LIMITATIONS"
.IX Header "LIMITATIONS"
\&\s-1XML::RPC\s0 will not create \*(L"bool\*(R", \*(L"dateTime.iso8601\*(R" or \*(L"base64\*(R" types
automatically. They will be parsed as \*(L"int\*(R" or \*(L"string\*(R". You can use the 
\&\s-1CODE\s0 ref to create these types.
.SH "AUTHOR"
.IX Header "AUTHOR"
Niek Albers, http://www.daansystems.com/
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (c) 2007\-2008 Niek Albers.  All rights reserved.  This program
is free software; you can redistribute it and/or modify it under the same
terms as Perl itself.
